import 'jb-calendar';
import { isLeapYear as isLeapYear$1, getYear, getMonth, getDate, getTime, isEqual } from 'date-fns';
import { isLeapYear, getYear as getYear$1, getMonth as getMonth$1, getDate as getDate$1, newDate, isAfter, isBefore } from 'date-fns-jalali';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

var HTML$1 = "<div class=\"jb-date-input-web-component\">\r\n    <label class=\"--hide\" for=\"\"><span class=\"label-value\"></span></label>\r\n    <div class=\"input-box\">\r\n        <div class=\"jb-date-input-start-section-wrapper\">\r\n            <slot name=\"start-section\"></slot>\r\n        </div>\r\n        <input id=\"CalendarInput\" class=\"input-box\" virtualkeyboardpolicy=\"manual\" inputmode=\"none\">\r\n        <div class=\"calendar-trigger\" tabindex=\"0\">\r\n            <slot name=\"calendar-trigger-icon\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"CalendarIcon\" viewBox=\"0 0 44.97 44.46\">\r\n                    <defs>\r\n                        <style></style>\r\n                    </defs>\r\n                    <g>\r\n                        <path id=\"Path_11948\" data-name=\"Path 11948\" class=\"cls-1\" d=\"M41.91,12H3.67C2,12,.61,12.59.61,13.37S2,14.78,3.67,14.78H41.91c1.69,0,3.06-.63,3.06-1.41S43.6,12,41.91,12Z\" transform=\"translate(0 0)\"/>\r\n                        <path id=\"Path_11946\" data-name=\"Path 11946\" class=\"cls-1\" d=\"M33.73,2.22H33V1.36A1.58,1.58,0,0,0,31.33,0a1.61,1.61,0,0,0-1.69,1.36v.86l-5.88,0V1.48A1.46,1.46,0,0,0,22.31,0h-.12a1.59,1.59,0,0,0-1.7,1.48v.74l-6.07,0V1.36A1.6,1.6,0,0,0,12.76,0C11.93,0,11,.61,11,1.36v.89C4.87,2.58,0,7.18,0,12.79v21.1c0,5.83,5.24,10.57,11.68,10.57h21.6C39.73,44.46,45,39.72,45,33.89V12.79C45,7,40.17,2.22,33.73,2.22ZM42,33.89c0,4.33-3.89,7.85-8.68,7.85H11.69C6.9,41.74,3,38.22,3,33.89V12.79C3,8.67,6.53,5.29,11,5v.68C11,6.4,12,7,12.76,7a1.63,1.63,0,0,0,1.67-1.36V4.93h6.06v.85c0,.75,1,1.23,1.71,1.23s1.56-.48,1.56-1.23V4.93h5.88v.72A1.62,1.62,0,0,0,31.33,7,1.59,1.59,0,0,0,33,5.65V4.93h.3c4.79,0,8.68,3.53,8.68,7.86Z\"/>\r\n                    </g>\r\n                </svg>\r\n            </slot>\r\n        </div>\r\n        <div class=\"jb-date-input-end-section-wrapper\">\r\n            <slot name=\"end-section\"></slot>\r\n        </div>\r\n    </div>\r\n    <div class=\"message-box\"></div>\r\n    <div class=\"calendar-container\">\r\n        <div class=\"calendar-wrapper\">\r\n            <jb-calendar tabindex=\"0\"></jb-calendar>\r\n        </div>\r\n    </div>\r\n</div>";

var css_248z$1 = ":host(:focus), :host(:focus-visible) {\n  outline: none; }\n\n.jb-date-input-web-component {\n  width: 100%;\n  margin: var(--jb-date-input-margin, 0 0);\n  position: relative; }\n  .jb-date-input-web-component:focus-visible {\n    outline: none; }\n  .jb-date-input-web-component label {\n    width: 100%;\n    margin: var(--jb-date-input-label-margin, 4px 0px);\n    display: block;\n    font-size: var(--jb-date-input-label-font-size, 0.8em);\n    color: var(--jb-date-input-label-color, #1f1735);\n    font-weight: var(--jb-date-input-label-weight, normal); }\n    .jb-date-input-web-component label.--hide {\n      display: none; }\n  .jb-date-input-web-component .input-box {\n    width: 100%;\n    box-sizing: border-box;\n    height: var(--jb-date-input-box-height, 40px);\n    border: solid var(--jb-date-input-border-width, 1px) var(--jb-date-input-border-color, #f7f6f6);\n    background-color: var(--jb-date-input-bgcolor, #f7f6f6);\n    border-bottom: solid var(--jb-date-input-border-bottom-width, 3px) var(--jb-date-input-border-color, #f7f6f6);\n    border-radius: var(--jb-date-input-border-radius, 16px);\n    margin: var(--jb-date-input-input-margin, 4px 0px);\n    transition: ease 0.3s all;\n    overflow: hidden;\n    display: grid;\n    grid-template-columns: auto 1fr auto auto;\n    box-shadow: var(--jb-date-input-box-shadow, none);\n    text-align: var(--jb-date-input-text-align, initial);\n    align-items: center; }\n    .jb-date-input-web-component .input-box:focus-within {\n      border-color: var(--jb-date-input-border-color-focus, #1e2832);\n      box-shadow: var(--jb-date-input-box-shadow-focus, none); }\n    .jb-date-input-web-component .input-box input {\n      border: none;\n      width: 100%;\n      box-sizing: border-box;\n      height: 100%;\n      background-color: transparent;\n      padding: 2px 12px 0 12px;\n      display: block;\n      font-family: inherit;\n      font-size: var(--jb-date-input-value-font-size, 1.1em);\n      color: var(--jb-date-input-value-color, #1f1735);\n      margin: 0;\n      border-radius: 0;\n      direction: ltr;\n      text-align: var(--jb-date-input-text-align, right);\n      text-align: -webkit-match-parent;\n      text-align: -moz-match-parent;\n      text-align: match-parent; }\n      .jb-date-input-web-component .input-box input::placeholder {\n        color: var(--jb-date-input-placeholder-color, initial);\n        font-size: var(--jb-date-input-placeholder-font-size, 1.1em); }\n      .jb-date-input-web-component .input-box input:focus {\n        outline: none; }\n    .jb-date-input-web-component .input-box .calendar-trigger {\n      display: var(--jb-date-input-calendar-trigger-display, block);\n      width: var(--jb-date-input-calendar-trigger-width, 28px);\n      height: var(--jb-date-input-calendar-trigger-height, 28px);\n      margin: 4px 0;\n      margin-inline-end: 8px;\n      cursor: pointer; }\n      .jb-date-input-web-component .input-box .calendar-trigger.--active svg .cls-1 {\n        fill: #1f1735; }\n      .jb-date-input-web-component .input-box .calendar-trigger svg {\n        width: 100%;\n        height: 100%; }\n        .jb-date-input-web-component .input-box .calendar-trigger svg .cls-1 {\n          fill: #bbb; }\n  .jb-date-input-web-component .message-box {\n    font-size: var(--jb-date-input-message-box-font-size, 0.7em);\n    font-weight: var(--jb-date-input-message-box-font-weight, normal);\n    text-align: var(--jb-date-input-message-box-text-align, initial);\n    padding: var(--jb-date-input-message-box-padding, 2px 8px);\n    color: var(--jb-date-input-message-box-color, #929292);\n    display: var(--jb-date-input-message-box-display, block); }\n    .jb-date-input-web-component .message-box:empty {\n      padding: 0; }\n    .jb-date-input-web-component .message-box.error {\n      color: var(--jb-date-input-message-box-color-error, red); }\n  .jb-date-input-web-component .calendar-container {\n    position: absolute;\n    display: none;\n    inset-block-start: 64px;\n    inset-inline-start: 0;\n    z-index: var(--jb-date-input-calendar-wrapper-z-index, 10);\n    will-change: transform;\n    transition: transform 0.3s 0s ease; }\n    @media (min-width: 320px) and (max-width: 479px) {\n      .jb-date-input-web-component .calendar-container {\n        inset-block-start: 0;\n        inset-inline-start: 0;\n        bottom: 0;\n        position: fixed;\n        width: 100vw;\n        height: 100vh;\n        background-color: rgba(0, 0, 0, 0.5);\n        backdrop-filter: blur(5px);\n        display: none;\n        grid-template-rows: 1fr auto;\n        grid-template-columns: 1fr;\n        grid-template-areas: \".\" \"calendar-wrapper\";\n        overflow-x: hidden; } }\n    .jb-date-input-web-component .calendar-container.--show {\n      display: grid; }\n    .jb-date-input-web-component .calendar-container .calendar-wrapper {\n      background-color: var(--jb-date-input-calender-wrapper-bg-color, #fff);\n      border-radius: var(--jb-date-input-calender-wrapper-border-radius, 24px);\n      padding: 16px;\n      box-shadow: 12px 12px 16px 0 rgba(0, 0, 0, 0.25), -8px -8px 12px 0 rgba(255, 255, 255, 0.3);\n      display: grid;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box; }\n      @media (min-width: 320px) and (max-width: 479px) {\n        .jb-date-input-web-component .calendar-container .calendar-wrapper {\n          border-radius: var(--jb-date-input-calender-wrapper-border-radius, 24px) var(--jb-date-input-calender-wrapper-border-radius, 24px) 0 0;\n          grid-area: calendar-wrapper;\n          padding: 0;\n          padding: 32px 0; } }\n    .jb-date-input-web-component .calendar-container jb-calendar:focus {\n      outline: none; }\n";

var HTML = "<div class=\"jb-date-input-inbox-element-web-component\">\r\n    <slot></slot>\r\n</div>";

var css_248z = ".jb-date-input-inbox-element-web-component {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-height: 100%;\n  overflow-y: hidden;\n  background-color: transparent;\n  padding: 0 8px;\n  width: auto; }\n";

class JBDDateInputInboxElementWebComponent extends HTMLElement {
    constructor() {
        super();
        this.initWebComponent();
    }
    connectedCallback() {
        // standard web component event that called when all of dom is binded
        this.callOnLoadEvent();
        this.callOnInitEvent();
    }
    callOnLoadEvent() {
        const event = new CustomEvent('load', { bubbles: true, composed: true });
        this.dispatchEvent(event);
    }
    callOnInitEvent() {
        const event = new CustomEvent('init', { bubbles: true, composed: true });
        this.dispatchEvent(event);
    }
    initWebComponent() {
        const shadowRoot = this.attachShadow({
            mode: 'open',
            delegatesFocus: true,
        });
        const html = `<style>${css_248z}</style>` + '\n' + HTML;
        const element = document.createElement('template');
        element.innerHTML = html;
        shadowRoot.appendChild(element.content.cloneNode(true));
    }
}
const myElementNotExists$1 = !customElements.get('jb-date-input-inbox-element');
if (myElementNotExists$1) {
    window.customElements.define('jb-date-input-inbox-element', JBDDateInputInboxElementWebComponent);
}

var InputTypes;
(function (InputTypes) {
    InputTypes["jalali"] = "JALALI";
    InputTypes["gregorian"] = "GREGORIAN";
})(InputTypes || (InputTypes = {}));
var ValueTypes;
(function (ValueTypes) {
    ValueTypes["jalali"] = "JALALI";
    ValueTypes["gregorian"] = "GREGORIAN";
    ValueTypes["timestamp"] = "TIME_STAMP";
})(ValueTypes || (ValueTypes = {}));

function getEmptyValueObject() {
    return {
        gregorian: {
            year: null,
            month: null,
            day: null
        },
        jalali: {
            year: null,
            month: null,
            day: null
        },
        timeStamp: null
    };
}
function handleDayBeforeInput(typedNumber, carretPos) {
    let isIgnoreChar = false;
    if (carretPos == 8 && typedNumber > 3) {
        this.inputChar("0", carretPos);
        carretPos++;
    }
    if (carretPos == 9 && typedNumber > 1 && this.elements.input.value[8] == "3") {
        //prevent day input bigger than 31 for example 38 or 34
        isIgnoreChar = true;
    }
    if (carretPos == 9 && typedNumber == 0 && this.elements.input.value[8] == "0") {
        //prevent 00 for day
        isIgnoreChar = true;
    }
    if (carretPos == 8 && typedNumber == 0 && this.elements.input.value[9] == "0") {
        //prevent 00 for day
        isIgnoreChar = true;
    }
    if (carretPos == 8 && typedNumber == 3 && this.elements.input.value[9] > "0") {
        if (this.inputType == InputTypes.jalali) {
            // when day is 09 and user type 3 it prevent 39 as a day 1400/08/|19 => type 1400/08/39 X we dont let it happen
            if (this.typedMonth.length == 2 && parseInt(this.typedMonth) > 6) {
                //second six month of year in jalali have 30 day
                this.inputChar("0", 9);
            }
            if (this.typedMonth.length == 2 && parseInt(this.typedMonth) < 7 && this.elements.input.value[9] > "1") {
                //first six month of year in jalali have 31 day
                this.inputChar("1", 9);
            }
        }
    }
    return { isIgnoreChar: isIgnoreChar, carretPos: carretPos };
}
function handleMonthBeforeInput(typedNumber, carretPos) {
    let isIgnoreChar = false;
    if (carretPos == 5 && typedNumber == 1 && this.elements.input.value[6] > "2") {
        //prevent month input bigger than 12 for example 19 or 16
        isIgnoreChar = true;
    }
    if (carretPos == 6 && typedNumber > 2 && this.elements.input.value[5] == "1") {
        //prevent month input bigger than 12 for example 19 or 16
        isIgnoreChar = true;
    }
    if (carretPos == 6 && typedNumber == 0 && this.elements.input.value[5] == "0") {
        //prevent 00 for month
        isIgnoreChar = true;
    }
    if (carretPos == 5 && typedNumber == 0 && this.elements.input.value[4] == "0") {
        //prevent 00 for month
        isIgnoreChar = true;
    }
    return { isIgnoreChar: isIgnoreChar, carretPos: carretPos };
}

var _DateFactory_instances, _a, _DateFactory_valueType, _DateFactory_inputType, _DateFactory_nicheNumbers, _DateFactory_valueFormat, _DateFactory_getDateValueFromGregorian, _DateFactory_getDateValueFromJalali, _DateFactory_executeFormatAndExtractValue;
class DateFactory {
    get valueFormat() {
        return __classPrivateFieldGet(this, _DateFactory_valueFormat, "f");
    }
    set valueFormat(valueFormat) {
        __classPrivateFieldSet(this, _DateFactory_valueFormat, valueFormat, "f");
    }
    get nicheNumbers() {
        return __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f");
    }
    get yearOnEmptyBaseOnValueType() {
        if (__classPrivateFieldGet(this, _DateFactory_valueType, "f") == ValueTypes.jalali) {
            return __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarYearOnEmpty.jalali;
        }
        return __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarYearOnEmpty.gregorian;
    }
    get monthOnEmptyBaseOnValueType() {
        if (this.valueType == ValueTypes.jalali) {
            return __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarMonthOnEmpty.jalali;
        }
        return __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarMonthOnEmpty.gregorian;
    }
    get inputType() {
        return __classPrivateFieldGet(this, _DateFactory_inputType, "f");
    }
    get valueType() {
        return __classPrivateFieldGet(this, _DateFactory_valueType, "f");
    }
    constructor(args) {
        _DateFactory_instances.add(this);
        _DateFactory_valueType.set(this, ValueTypes.gregorian);
        _DateFactory_inputType.set(this, InputTypes.jalali);
        //here we keep numbers that replace the year,month,day in niche situations
        _DateFactory_nicheNumbers.set(this, {
            //when year is invalid or empty and we want to show the calendar we need to show the current year or any other base on user config
            calendarYearOnEmpty: {
                jalali: DateFactory.todayJalaliYear,
                gregorian: DateFactory.todayGregorianYear
            },
            calendarMonthOnEmpty: {
                jalali: DateFactory.todayJalaliMonth,
                gregorian: DateFactory.todayGregorianMonth
            }
        });
        _DateFactory_valueFormat.set(this, 'YYYY-MM-DDTHH:mm:ss.SSS[Z]');
        if (args.inputType) {
            __classPrivateFieldSet(this, _DateFactory_inputType, args.inputType, "f");
        }
        if (args.valueType) {
            __classPrivateFieldSet(this, _DateFactory_valueType, args.valueType, "f");
        }
    }
    setInputType(inputType) {
        __classPrivateFieldSet(this, _DateFactory_inputType, inputType, "f");
    }
    setValueType(valueType) {
        __classPrivateFieldSet(this, _DateFactory_valueType, valueType, "f");
    }
    getYearValueBaseOnInputType(valueObject) {
        if (__classPrivateFieldGet(this, _DateFactory_inputType, "f") == InputTypes.jalali) {
            return valueObject.jalali.year;
        }
        return valueObject.gregorian.year;
    }
    getMonthValueBaseOnInputType(valueObject) {
        if (__classPrivateFieldGet(this, _DateFactory_inputType, "f") == InputTypes.jalali) {
            return valueObject.jalali.month;
        }
        return valueObject.gregorian.month;
    }
    getDayValueBaseOnInputType(valueObject) {
        if (__classPrivateFieldGet(this, _DateFactory_inputType, "f") == InputTypes.jalali) {
            return valueObject.jalali.day;
        }
        return valueObject.gregorian.day;
    }
    getDateFromValueDateString(valueDateString) {
        let resultDate = null;
        //create min date base on input value type
        if (this.valueType == ValueTypes.timestamp) {
            resultDate = DateFactory.getDateFromTimestamp(parseInt(valueDateString));
        }
        else {
            const dateValueObj = this.getDateObjectValueBaseOnFormat(valueDateString);
            //sometimes format set after min value restriction set by user so this object returned null in these scenario we set min after format set again
            if (dateValueObj !== null && dateValueObj !== undefined && dateValueObj.year !== null && dateValueObj.month !== null && dateValueObj.day !== null) {
                if (this.valueType == ValueTypes.gregorian) {
                    resultDate = DateFactory.getDateFromGregorian(dateValueObj.year, dateValueObj.month, dateValueObj.day);
                }
                if (this.valueType == ValueTypes.jalali) {
                    resultDate = DateFactory.getDateFromJalali(dateValueObj.year, dateValueObj.month, dateValueObj.day);
                }
            }
        }
        return resultDate;
    }
    getDateValueFromValueObject(valueObject) {
        if (valueObject.gregorian.year && valueObject.gregorian.month && valueObject.gregorian.day) {
            const date = new Date(valueObject.gregorian.year, valueObject.gregorian.month - 1, valueObject.gregorian.day);
            return date;
        }
        return null;
    }
    /**
     * @description use when user want component value and convert valueObject to user formatted value string base on format and value type
     */
    getDateValueStringFromValueObject(valueObject, type = this.valueType) {
        //this function convert inputed date to expected format base on valueType
        const emptyYearString = '0000';
        const emptyMonthString = '00';
        const emptyDayString = '00';
        const getGregorianValue = () => {
            const { year, month, day } = valueObject.gregorian;
            const yearStr = year == null ? emptyYearString : (year < 1000 ? (year < 100 ? (year < 10 ? "000" + year : "00" + year) : "0" + year) : year.toString());
            const monthStr = month == null ? emptyMonthString : month < 10 ? "0" + month : month.toString();
            const dayStr = day == null ? emptyDayString : day < 10 ? "0" + day : day.toString();
            const value = __classPrivateFieldGet(this, _DateFactory_valueFormat, "f").replace('YYYY', yearStr).replace('MM', monthStr).replace('DD', dayStr)
                .replace('HH', '00').replace('mm', '00').replace('ss', '00').replace('SSS', '000')
                .replace('[Z]', 'Ž').replace('Z', '+00:00').replace('Ž', 'Z');
            return value;
        };
        const getJalaliValue = () => {
            const { year, month, day } = valueObject.jalali;
            const yearStr = year == null ? emptyYearString : (year < 1000 ? (year < 100 ? (year < 10 ? "000" + year : "00" + year) : "0" + year) : year.toString());
            const monthStr = month == null ? emptyMonthString : month < 10 ? "0" + month : month.toString();
            const dayStr = day == null ? emptyDayString : day < 10 ? "0" + day : day.toString();
            const value = this.valueFormat.replace('YYYY', yearStr).replace('MM', monthStr).replace('DD', dayStr)
                .replace('HH', '00').replace('mm', '00').replace('ss', '00').replace('SSS', '000')
                .replace('[Z]', 'Ž').replace('Z', '+00:00').replace('Ž', 'Z');
            return value;
        };
        if (typeof valueObject == "object") {
            switch (type) {
                case 'GREGORIAN':
                    return getGregorianValue();
                case 'JALALI':
                    return getJalaliValue();
                case 'TIME_STAMP':
                    if (valueObject.timeStamp) {
                        return valueObject.timeStamp.toString();
                    }
            }
        }
        //when date is not completely valid
        return "";
    }
    getCalendarYear(valueObject) {
        const defaultYear = this.inputType == InputTypes.gregorian ? __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarYearOnEmpty.gregorian : __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarYearOnEmpty.jalali;
        return this.getYearValueBaseOnInputType(valueObject) || defaultYear;
    }
    getCalendarMonth(valueObject) {
        const defaultMonth = this.inputType == InputTypes.gregorian ? __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarMonthOnEmpty.gregorian : __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarMonthOnEmpty.jalali;
        return this.getMonthValueBaseOnInputType(valueObject) || defaultMonth;
    }
    getCalendarDay(valueObject) {
        return this.getDayValueBaseOnInputType(valueObject);
    }
    setCalendarDefaultDateView(year, month, inputType = __classPrivateFieldGet(this, _DateFactory_inputType, "f")) {
        if (inputType == InputTypes.gregorian) {
            __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarYearOnEmpty.gregorian = year;
            __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarMonthOnEmpty.gregorian = month;
        }
        else if (inputType == InputTypes.jalali) {
            __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarYearOnEmpty.jalali = year;
            __classPrivateFieldGet(this, _DateFactory_nicheNumbers, "f").calendarMonthOnEmpty.jalali = month;
        }
    }
    static checkJalaliDateValidation(jalaliYear, jalaliMonth, jalaliDay) {
        //check if jalali date is valid
        const result = {
            isValid: true,
            error: null
        };
        //this function check date itself validation not user setted validation
        if (isNaN(jalaliYear)) {
            result.isValid = false;
            result.error = "INVALID_YEAR";
        }
        if (isNaN(jalaliMonth)) {
            result.isValid = false;
            result.error = "INVALID_MONTH";
        }
        if (isNaN(jalaliDay)) {
            result.isValid = false;
            result.error = "INVALID_DAY";
        }
        if (jalaliMonth < 1) {
            result.isValid = false;
            result.error = "INVALID_MIN_MONTH_NUMBER";
        }
        if (jalaliDay < 1) {
            result.isValid = false;
            result.error = "INVALID_MIN_DAY_NUMBER";
        }
        if (jalaliMonth > 12) {
            result.isValid = false;
            result.error = "INVALID_MAX_MONTH_NUMBER";
        }
        if (jalaliDay > 31) {
            result.isValid = false;
            result.error = "INVALID_MAX_DAY_NUMBER";
        }
        if (jalaliYear < 1000) {
            result.isValid = false;
            result.error = "INVALID_MIN_YEAR_NUMBER";
        }
        if (jalaliYear > 9999) {
            result.isValid = false;
            result.error = "INVALID_MAX_YEAR_NUMBER";
        }
        if (jalaliMonth > 6 && jalaliMonth < 12) {
            if (jalaliDay > 30) {
                result.isValid = false;
                result.error = "INVALID_DAY_IN_MONTH";
            }
        }
        if (jalaliMonth == 12) {
            if (jalaliDay > 30) {
                result.isValid = false;
                result.error = "INVALID_DAY_IN_MONTH";
            }
        }
        if (result.isValid && jalaliMonth == 12) {
            //if everything was ok then we check for leap year
            if (jalaliMonth == 12 && jalaliDay == 30) {
                const date = DateFactory.getDateFromJalali(jalaliYear, jalaliMonth, jalaliDay);
                if (!isLeapYear(date)) {
                    result.isValid = false;
                    result.error = "INVALID_DAY_FOR_LEAP";
                }
            }
        }
        return result;
    }
    static checkGregorianDateValidation(gregorianYear, gregorianMonth, gregorianDay) {
        const result = {
            isValid: true,
            error: null
        };
        //this function check date itself validation not user setted validation
        if (isNaN(gregorianYear)) {
            result.isValid = false;
            result.error = "INVALID_YEAR";
        }
        if (isNaN(gregorianMonth)) {
            result.isValid = false;
            result.error = "INVALID_MONTH";
        }
        if (isNaN(gregorianDay)) {
            result.isValid = false;
            result.error = "INVALID_DAY";
        }
        if (gregorianMonth < 1) {
            result.isValid = false;
            result.error = "INVALID_MIN_MONTH_NUMBER";
        }
        if (gregorianDay < 1) {
            result.isValid = false;
            result.error = "INVALID_MIN_DAY_NUMBER";
        }
        if (gregorianMonth > 12) {
            result.isValid = false;
            result.error = "INVALID_MAX_MONTH_NUMBER";
        }
        if (gregorianDay > 31) {
            result.isValid = false;
            result.error = "INVALID_MAX_DAY_NUMBER";
        }
        if (gregorianYear < 1000) {
            result.isValid = false;
            result.error = "INVALID_MIN_YEAR_NUMBER";
        }
        if (gregorianYear > 9999) {
            result.isValid = false;
            result.error = "INVALID_MAX_YEAR_NUMBER";
        }
        if ([2, 4, 6, 9, 11].includes(gregorianDay)) {
            //month has less than 31 day
            if (gregorianDay > 30) {
                result.isValid = false;
                result.error = "INVALID_DAY_IN_MONTH";
            }
        }
        if (gregorianMonth == 2 && gregorianDay > 28) {
            if (gregorianDay == 29) {
                const date = DateFactory.getDateFromGregorian(gregorianYear, gregorianMonth, gregorianDay);
                if (!isLeapYear$1(date)) {
                    result.isValid = false;
                    result.error = "INVALID_DAY_FOR_LEAP";
                }
            }
            else {
                result.isValid = false;
                result.error = "INVALID_DAY_IN_MONTH";
            }
        }
        return result;
    }
    getDateValueObjectBaseOnInputType(year, month, day, oldYear, oldMonth) {
        if (__classPrivateFieldGet(this, _DateFactory_inputType, "f") == InputTypes.gregorian) {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, year, month, day, oldYear, oldMonth);
        }
        if (__classPrivateFieldGet(this, _DateFactory_inputType, "f") == InputTypes.jalali) {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, year, month, day, oldYear, oldMonth);
        }
        console.error("INVALID_INPUT_TYPE");
        return getEmptyValueObject();
    }
    getDateValueObjectBaseOnValueType(year, month, day, oldYear, oldMonth) {
        if (__classPrivateFieldGet(this, _DateFactory_valueType, "f") == ValueTypes.gregorian) {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, year, month, day, oldYear, oldMonth);
        }
        if (__classPrivateFieldGet(this, _DateFactory_valueType, "f") == ValueTypes.jalali) {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, year, month, day, oldYear, oldMonth);
        }
        if (__classPrivateFieldGet(this, _DateFactory_valueType, "f") == ValueTypes.timestamp) {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, year, month, day, oldYear, oldMonth);
        }
        console.error("INVALID_INPUT_TYPE");
        return getEmptyValueObject();
    }
    getDateValueObjectFromTimeStamp(timestamp) {
        const date = new Date(timestamp);
        return this.getDateObjectValueFromDateValue(date);
    }
    /**
  * @description this function return date object base on javascript Date type
  */
    getDateObjectValueFromDateValue(inputValue) {
        const result = {
            gregorian: {
                year: getYear(inputValue),
                month: getMonth(inputValue) + 1,
                day: getDate(inputValue)
            },
            jalali: {
                year: getYear$1(inputValue),
                month: getMonth$1(inputValue) + 1,
                day: getDate$1(inputValue)
            },
            timeStamp: getTime(inputValue),
        };
        return result;
    }
    getDateObjectValueBaseOnFormat(valueString, format = __classPrivateFieldGet(this, _DateFactory_valueFormat, "f")) {
        const res = __classPrivateFieldGet(DateFactory, _a, "m", _DateFactory_executeFormatAndExtractValue).call(DateFactory, valueString, format);
        const dateInObject = {
            year: null,
            month: null,
            day: null,
        };
        if (res && res.groups) {
            dateInObject.year = parseInt(res.groups.year);
            dateInObject.month = parseInt(res.groups.month);
            dateInObject.day = parseInt(res.groups.day);
        }
        return dateInObject;
    }
    static getDate(year, month, day, inputType) {
        if (inputType == InputTypes.jalali) {
            return DateFactory.getDateFromJalali(year, month, day);
        }
        return DateFactory.getDateFromGregorian(year, month, day);
    }
    static getDateFromGregorian(year, month, day) {
        return new Date(year, month - 1, day);
    }
    static getDateFromJalali(year, month, day) {
        const date = newDate(year, month - 1, day);
        return date;
    }
    static getDateFromTimestamp(timestamp) {
        return new Date(timestamp);
    }
    static checkDateRestrictions(year, month, day, dateInputType, dateRestrictions) {
        //this function check if inputed date is valid date in min and max range
        const result = {
            get isAllValid() { return (this.min.isValid && this.max.isValid); },
            min: {
                isValid: true,
                message: null
            },
            max: {
                isValid: true,
                message: null
            }
        };
        const date = DateFactory.getDate(year, month, day, dateInputType);
        if (dateRestrictions.min) {
            const minValid = isAfter(date, dateRestrictions.min) || isEqual(date, dateRestrictions.min);
            if (!minValid) {
                result.min = {
                    isValid: false,
                    message: 'تاریخ انتخابی کمتر از بازه مجاز است'
                };
            }
        }
        if (dateRestrictions.max) {
            const maxValid = isBefore(date, dateRestrictions.max) || isEqual(date, dateRestrictions.max);
            if (!maxValid) {
                result.max = {
                    isValid: false,
                    message: 'تاریخ انتخابی بیشنر از بازه مجاز است'
                };
            }
        }
        return result;
    }
    static get todayGregorianYear() {
        return getYear(new Date());
    }
    static get todayJalaliYear() {
        const year = getYear$1(new Date());
        return year;
    }
    static get todayGregorianMonth() {
        return getMonth(new Date()) + 1;
    }
    static get todayJalaliMonth() {
        return getMonth$1(new Date()) + 1;
    }
}
_a = DateFactory, _DateFactory_valueType = new WeakMap(), _DateFactory_inputType = new WeakMap(), _DateFactory_nicheNumbers = new WeakMap(), _DateFactory_valueFormat = new WeakMap(), _DateFactory_instances = new WeakSet(), _DateFactory_getDateValueFromGregorian = function _DateFactory_getDateValueFromGregorian(gregorianYear, gregorianMonth, gregorianDay, oldGregorianYear, oldGregorianMonth) {
    const valueObject = getEmptyValueObject();
    const dateValidationResult = DateFactory.checkGregorianDateValidation(gregorianYear, gregorianMonth, gregorianDay);
    if (!dateValidationResult.isValid) {
        if (dateValidationResult.error == "INVALID_MIN_DAY_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, gregorianYear, gregorianMonth, 1, oldGregorianYear, oldGregorianMonth);
        }
        if (dateValidationResult.error == "INVALID_MIN_MONTH_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, gregorianYear, 1, gregorianDay, oldGregorianYear, oldGregorianMonth);
        }
        if (dateValidationResult.error == "INVALID_MIN_YEAR_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, 1900, gregorianMonth, gregorianDay, oldGregorianYear, oldGregorianMonth);
        }
        if (dateValidationResult.error == "INVALID_MAX_DAY_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, gregorianYear, gregorianMonth, 31, oldGregorianYear, oldGregorianMonth);
        }
        if (dateValidationResult.error == "INVALID_MAX_MONTH_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, gregorianYear, 12, gregorianDay, oldGregorianYear, oldGregorianMonth);
        }
        if (dateValidationResult.error == "INVALID_MAX_YEAR_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, 9000, gregorianMonth, gregorianDay, oldGregorianYear, oldGregorianMonth);
        }
        if (dateValidationResult.error == "INVALID_DAY_IN_MONTH") {
            if (oldGregorianMonth != gregorianMonth && gregorianDay > 29) {
                //if we update to 30days month when day set to 31 we substrc day to 30 instead of prevent user from updating month
                return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, gregorianYear, gregorianMonth, gregorianDay - 1, oldGregorianYear, oldGregorianMonth);
            }
        }
        if (dateValidationResult.error == "INVALID_DAY_FOR_LEAP") {
            //if it was leap year and calender go to next year in 30 esfand
            if (oldGregorianYear != gregorianYear && gregorianDay == 29) {
                //if we update year and prev year was kabiseh so new year cant update, we update day to 29 esfand and let user change year smootly without block
                return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromGregorian).call(this, gregorianYear, gregorianMonth, gregorianDay - 1, oldGregorianYear, oldGregorianMonth);
            }
        }
        return getEmptyValueObject();
    }
    const date = DateFactory.getDateFromGregorian(gregorianYear, gregorianMonth, gregorianDay);
    valueObject.gregorian = {
        year: getYear(date),
        month: getMonth(date) + 1,
        day: getDate(date)
    };
    valueObject.jalali = {
        year: getYear$1(date),
        month: getMonth$1(date) + 1,
        day: getDate$1(date)
    };
    valueObject.timeStamp = getTime(date);
    return valueObject;
}, _DateFactory_getDateValueFromJalali = function _DateFactory_getDateValueFromJalali(jalaliYear, jalaliMonth, jalaliDay, oldJalaliYear, oldJalaliMonth) {
    const valueObject = getEmptyValueObject();
    const dateValidationResult = DateFactory.checkJalaliDateValidation(jalaliYear, jalaliMonth, jalaliDay);
    if (!dateValidationResult.isValid) {
        if (dateValidationResult.error == "INVALID_MIN_DAY_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, jalaliYear, jalaliMonth, 1, oldJalaliYear, oldJalaliMonth);
        }
        if (dateValidationResult.error == "INVALID_MIN_MONTH_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, jalaliYear, 1, jalaliDay, oldJalaliYear, oldJalaliMonth);
        }
        if (dateValidationResult.error == "INVALID_MIN_YEAR_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, 1300, jalaliMonth, jalaliDay, oldJalaliYear, oldJalaliMonth);
        }
        if (dateValidationResult.error == "INVALID_MAX_DAY_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, jalaliYear, jalaliMonth, 31, oldJalaliYear, oldJalaliMonth);
        }
        if (dateValidationResult.error == "INVALID_MAX_MONTH_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, jalaliYear, 12, jalaliDay, oldJalaliYear, oldJalaliMonth);
        }
        if (dateValidationResult.error == "INVALID_MAX_YEAR_NUMBER") {
            return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, 9999, jalaliMonth, jalaliDay, oldJalaliYear, oldJalaliMonth);
        }
        if (dateValidationResult.error == "INVALID_DAY_IN_MONTH") {
            if (oldJalaliMonth != jalaliMonth && jalaliDay == 31) {
                //if we update to 30days month when day set to 31 we substrc day to 30 instead of prevent user from updating month
                return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, jalaliYear, jalaliMonth, jalaliDay - 1, oldJalaliYear, oldJalaliMonth);
            }
        }
        if (dateValidationResult.error == "INVALID_DAY_FOR_LEAP") {
            //if it was leap year and calender go to next year in 30 esfand
            if (oldJalaliYear != jalaliYear && jalaliDay == 30) {
                //if we update year and prev year was kabiseh so new year cant update, we update day to 39 esfand and let user change year smootly without block
                return __classPrivateFieldGet(this, _DateFactory_instances, "m", _DateFactory_getDateValueFromJalali).call(this, jalaliYear, jalaliMonth, jalaliDay - 1, oldJalaliYear, oldJalaliMonth);
            }
        }
        return getEmptyValueObject();
    }
    const date = DateFactory.getDateFromJalali(jalaliYear, jalaliMonth, jalaliDay);
    valueObject.gregorian = {
        year: getYear(date),
        month: getMonth(date) + 1,
        day: getDate(date)
    };
    valueObject.jalali = {
        year: getYear$1(date),
        month: getMonth$1(date) + 1,
        day: getDate$1(date)
    };
    valueObject.timeStamp = getTime(date);
    return valueObject;
}, _DateFactory_executeFormatAndExtractValue = function _DateFactory_executeFormatAndExtractValue(value, format) {
    const regexString = format.replace('YYYY', '(?<year>[\\d]{4})').replace('MM', '(?<month>[\\d]{2})').replace('DD', '(?<day>[\\d]{2})')
        .replace('HH', '(?<hour>[\\d]{2})').replace('mm', '(?<minute>[\\d]{2})').replace('ss', '(?<second>[\\d]{2})').replace('SSS', '(?<miliSecond>[\\d]{3})')
        .replace('[Z]', 'Ž').replace('Z', '(?<zone>([\\+,-]\\d{2}:\\d{2}))').replace('Ž', 'Z');
    const regex = new RegExp(regexString, 'g');
    const res = regex.exec(value);
    return res;
};

function faToEnDigits(input) {
    if (typeof input !== "string"){
        return '';
    }
    const regex = /[۰-۹]/g;
    let result = input.replace(regex, function (w) {
        return String.fromCharCode(w.charCodeAt(0) - 1728);
    }
    );
    return result;
}

function enToFaDigits(input) {
    if (typeof input !== "string" && isNaN(input)){
        return '';
    }
    const regex = /[0-9]/g;
    let result = input.toString().replace(regex, function (w) {
        return String.fromCharCode(w.charCodeAt(0) + 1728);
    }
    );
    return result;
}

var _JBDateInputWebComponent_instances, _JBDateInputWebComponent_dateFactory, _JBDateInputWebComponent_showCalendar, _JBDateInputWebComponent_inputRegex, _JBDateInputWebComponent_valueObject, _JBDateInputWebComponent_updateFormAssossicatedValue, _JBDateInputWebComponent_placeholder, _JBDateInputWebComponent_sInputValue_get, _JBDateInputWebComponent_inputValue_get, _JBDateInputWebComponent_inputValue_set, _JBDateInputWebComponent_validationList, _JBDateInputWebComponent_usePersianDigits, _JBDateInputWebComponent_setMinDate, _JBDateInputWebComponent_setMaxDate, _JBDateInputWebComponent_setDateValue, _JBDateInputWebComponent_setDateValueFromDate, _JBDateInputWebComponent_setDateValueFromTimeStamp, _JBDateInputWebComponent_setDateValueFromString, _JBDateInputWebComponent_setDateValueFromNumbers, _JBDateInputWebComponent_setDateValueFromNumberBaseOnInputType, _JBDateInputWebComponent_updateinputTextFromValue, _JBDateInputWebComponent_lastInputStringValue, _JBDateInputWebComponent_isCalendarButtonClickEventIsAfterFocusEvent, _JBDateInputWebComponent_fixCalendarContainerPos, _JBDateInputWebComponent_resetCalendarContainerPos;
if (HTMLElement == undefined) {
    //in case of server render or old browser
    console.error('you cant render web component on a server side');
}
const emptyInputValueString = '    /  /  ';
class JBDateInputWebComponent extends HTMLElement {
    ;
    get name() { return this.getAttribute('name'); }
    get form() { return this.internals_.form; }
    get value() {
        const value = this.getDateValue();
        return value;
    }
    set value(value) {
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValue).call(this, value);
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    /**
     * @description return date value if value valid and return null if inputed value is not valid
     */
    get valueInDate() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueFromValueObject(__classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f"));
    }
    get inputValue() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_inputValue_get);
    }
    get placeholder() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_placeholder, "f");
    }
    set placeholder(value) {
        __classPrivateFieldSet(this, _JBDateInputWebComponent_placeholder, value, "f");
        if (value !== null) {
            this.elements.input.placeholder = value;
        }
        else {
            this.elements.input.placeholder = "";
        }
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    get showCalendar() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_showCalendar, "f");
    }
    set showCalendar(value) {
        __classPrivateFieldSet(this, _JBDateInputWebComponent_showCalendar, value, "f");
        if (value == true) {
            this.elements.calendarContainer.classList.add('--show');
            this.elements.calendarTriggerButton.classList.add('--active');
        }
        else {
            this.elements.calendarContainer.classList.remove('--show');
            this.elements.calendarTriggerButton.classList.remove('--active');
        }
    }
    get inputType() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").inputType;
    }
    set inputType(value) {
        if (Object.values(InputTypes).includes(value)) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").setInputType(value);
            this.onInputTypeChange();
        }
        else {
            console.error(`${value} is not a valid input type`);
        }
    }
    get valueType() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").valueType;
    }
    set valueType(value) {
        if (Object.values(ValueTypes).includes(value)) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").setValueType(value);
        }
        else {
            console.error(`${value} is not a valid value type`);
        }
    }
    get validationList() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_validationList, "f");
    }
    set validationList(value) {
        __classPrivateFieldSet(this, _JBDateInputWebComponent_validationList, value, "f");
        this.triggerInputValidation(false);
    }
    get yearValue() {
        switch (this.valueType) {
            case ValueTypes.jalali:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.year;
            case ValueTypes.gregorian:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.year;
            case ValueTypes.timestamp:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.year;
            default:
                return null;
        }
    }
    get monthValue() {
        switch (this.valueType) {
            case ValueTypes.jalali:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.month;
            case ValueTypes.gregorian:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.month;
            case ValueTypes.timestamp:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.month;
            default:
                return null;
        }
    }
    get dayValue() {
        switch (this.valueType) {
            case ValueTypes.jalali:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.day;
            case ValueTypes.gregorian:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.day;
            case ValueTypes.timestamp:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.day;
            default:
                return null;
        }
    }
    get yearBaseOnInputType() {
        switch (this.inputType) {
            case InputTypes.jalali:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.year;
            case InputTypes.gregorian:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.year;
            default:
                return null;
        }
    }
    get monthBaseOnInputType() {
        switch (this.inputType) {
            case InputTypes.jalali:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.month;
            case InputTypes.gregorian:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.month;
            default:
                return null;
        }
    }
    get dayBaseOnInputType() {
        switch (this.inputType) {
            case InputTypes.jalali:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.day;
            case InputTypes.gregorian:
                return __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian.day;
            default:
                return null;
        }
    }
    get typedYear() {
        const typedYear = this.inputValue.substring(0, 4);
        return typedYear;
    }
    get typedMonth() {
        const typedMonth = this.inputValue.substring(5, 7);
        return typedMonth;
    }
    get typedDay() {
        const typedDay = this.inputValue.substring(8, 10);
        return typedDay;
    }
    get sTypedYear() {
        const typedYear = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get).substring(0, 4);
        return typedYear;
    }
    get sTypedMonth() {
        const typedMonth = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get).substring(5, 7);
        return typedMonth;
    }
    get sTypedDay() {
        const typedDay = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get).substring(8, 10);
        return typedDay;
    }
    get valueFormat() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").valueFormat;
    }
    get usePersianDigits() {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_usePersianDigits, "f");
    }
    set usePersianDigits(value) {
        __classPrivateFieldSet(this, _JBDateInputWebComponent_usePersianDigits, value, "f");
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    constructor() {
        super();
        _JBDateInputWebComponent_instances.add(this);
        _JBDateInputWebComponent_dateFactory.set(this, new DateFactory({ inputType: this.getAttribute("value-type"), valueType: this.getAttribute("value-type") }));
        _JBDateInputWebComponent_showCalendar.set(this, false);
        this.inputFormat = 'YYYY/MM/DD';
        _JBDateInputWebComponent_inputRegex.set(this, /^(?<year>[\u06F0-\u06F90-9,\s]{4})\/(?<month>[\u06F0-\u06F90-9,\s]{2})\/(?<day>[\u06F0-\u06F90-9,\s]{2})$/g);
        this.validation = {
            isValid: null,
            message: '',
            detail: null
        };
        this.dateRestrictions = {
            min: null,
            max: null
        };
        this.required = false;
        this.DefaultValidationErrorMessage = "مقدار وارد شده نا معتبر است";
        _JBDateInputWebComponent_valueObject.set(this, getEmptyValueObject());
        _JBDateInputWebComponent_placeholder.set(this, null);
        _JBDateInputWebComponent_validationList.set(this, []);
        _JBDateInputWebComponent_usePersianDigits.set(this, false);
        _JBDateInputWebComponent_lastInputStringValue.set(this, '    /  /  ');
        _JBDateInputWebComponent_isCalendarButtonClickEventIsAfterFocusEvent.set(this, false);
        _JBDateInputWebComponent_fixCalendarContainerPos.set(this, () => {
            const bcr = this.elements.calendarContainer.getBoundingClientRect();
            const overflowSize = document.body.clientHeight - bcr.bottom;
            if (overflowSize < 0) {
                this.elements.calendarContainer.style.transform = `translateY(${overflowSize}px)`;
            }
        });
        _JBDateInputWebComponent_resetCalendarContainerPos.set(this, () => {
            this.elements.calendarContainer.style.transform = `translateY(${0}px)`;
        });
        if (typeof this.attachInternals == "function") {
            //some browser dont support attachInternals
            this.internals_ = this.attachInternals();
        }
        this.initWebComponent();
        this.initProp();
        // js standard input element to more assosicate it with form element
    }
    connectedCallback() {
        // standard web component event that called when all of dom is binded
        this.callOnLoadEvent();
    }
    callOnLoadEvent() {
        const event = new CustomEvent('load', { bubbles: true, composed: true });
        this.dispatchEvent(event);
    }
    callOnInitEvent() {
        const event = new CustomEvent('init', { bubbles: true, composed: true });
        this.dispatchEvent(event);
    }
    initWebComponent() {
        const shadowRoot = this.attachShadow({
            mode: 'open',
            delegatesFocus: true
        });
        const html = `<style>${css_248z$1}</style>` + '\n' + HTML$1;
        const element = document.createElement('template');
        element.innerHTML = html;
        shadowRoot.appendChild(element.content.cloneNode(true));
        this.elements = {
            input: shadowRoot.querySelector('.input-box input'),
            calendarTriggerButton: shadowRoot.querySelector('.calendar-trigger'),
            calendar: shadowRoot.querySelector('jb-calendar'),
            calendarContainer: shadowRoot.querySelector('.calendar-container'),
            calendarWrapper: shadowRoot.querySelector('.calendar-wrapper'),
            labelValue: shadowRoot.querySelector('label .label-value'),
            label: shadowRoot.querySelector('label'),
            messageBox: shadowRoot.querySelector('.message-box')
        };
        this.registerEventListener();
        this.initDeviceSpecifics();
    }
    /**
     * @description activate some features specially on mobile or other specific devices
     * @private
     */
    initDeviceSpecifics() {
        if (/Mobi|Android/i.test(navigator.userAgent)) {
            // on mobile
            this.elements.input.setAttribute('readonly', 'true');
            //TODO: handle back button and prevent back when calendar is open
        }
        else {
            // on non-mobile
            this.elements.input.removeAttribute('readonly');
        }
    }
    registerEventListener() {
        this.elements.input.addEventListener('blur', this.onInputBlur.bind(this), { passive: true });
        this.elements.input.addEventListener('focus', this.onInputFocus.bind(this), { passive: true });
        this.elements.input.addEventListener('keypress', this.onInputKeyPress.bind(this), { passive: true });
        this.elements.input.addEventListener('keyup', this.onInputKeyup.bind(this), { passive: true });
        this.elements.input.addEventListener('keydown', this.onInputKeydown.bind(this));
        this.elements.input.addEventListener('beforeinput', this.onInputBeforeInput.bind(this));
        this.elements.calendarTriggerButton.addEventListener('focus', this.onCalendarButtonFocused.bind(this));
        this.elements.calendarTriggerButton.addEventListener('blur', this.onCalendarButtonBlur.bind(this));
        this.elements.calendarTriggerButton.addEventListener('click', this.onCalendarButtonClick.bind(this));
        this.elements.calendar.addEventListener('select', (e) => this.onCalendarSelect(e));
        this.elements.calendar.addEventListener('init', this.onCalendarElementinitiated.bind(this));
        this.elements.calendar.addEventListener('blur', this.onCalendarBlur.bind(this), { passive: true });
        this.elements.calendarContainer.addEventListener('click', this.onCalendarContainerClicked.bind(this), { passive: true });
        this.elements.calendarContainer.addEventListener('mouseenter', __classPrivateFieldGet(this, _JBDateInputWebComponent_fixCalendarContainerPos, "f"));
        this.elements.calendarContainer.addEventListener('mouseleave', __classPrivateFieldGet(this, _JBDateInputWebComponent_resetCalendarContainerPos, "f"));
    }
    initProp() {
        this.setValueObjNull();
        __classPrivateFieldSet(this, _JBDateInputWebComponent_instances, emptyInputValueString, "a", _JBDateInputWebComponent_inputValue_set);
        this.value = this.getAttribute('value') || '';
        this.validation = {
            isValid: null,
            message: null,
            detail: null
        };
        this.callOnInitEvent();
    }
    static get observedAttributes() {
        return ['label', 'value-type', 'message', 'value', 'name', 'format', 'min', 'max', 'required', 'input-type', 'direction', 'use-persian-number', 'placeholder'];
    }
    attributeChangedCallback(name, oldValue, newValue) {
        // do something when an attribute has changed
        this.onAttributeChange(name, newValue);
    }
    onAttributeChange(name, value) {
        switch (name) {
            case 'label':
                this.elements.labelValue.innerHTML = value;
                if (value == null || value == undefined || value == "") {
                    this.elements.label.classList.add('--hide');
                }
                else {
                    this.elements.label.classList.remove('--hide');
                }
                break;
            case 'message':
                this.elements.messageBox.innerHTML = value;
                break;
            case 'value':
                this.value = value;
                break;
            case 'name':
                this.elements.input.setAttribute('name', value);
                break;
            case 'value-type':
                this.valueType = value;
                break;
            case 'format':
                this.setFormat(value);
                break;
            case 'min':
                __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setMinDate).call(this, value);
                break;
            case 'max':
                __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setMaxDate).call(this, value);
                break;
            case 'required':
                if (value === "" || value == "true") {
                    this.required = true;
                }
                else {
                    this.required = false;
                }
                break;
            case 'input-type':
                this.inputType = value;
                break;
            case 'direction':
                this.elements.calendar.setAttribute('direction', value);
                break;
            case 'use-persian-number':
                if (value == 'true' || value == '') {
                    this.usePersianDigits = true;
                    this.elements.calendar.usePersianNumber = true;
                }
                if (value == 'false' || value == null) {
                    this.usePersianDigits = false;
                    this.elements.calendar.usePersianNumber = false;
                }
                break;
            case 'placeholder':
                this.placeholder = value;
                break;
        }
    }
    setFormat(newFormat) {
        //override new format base on user config
        __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").valueFormat = newFormat;
        //if we have min and max  date setted before format set we set them again so it works
        const minDate = this.getAttribute('min');
        if (minDate) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setMinDate).call(this, minDate);
        }
        const maxDate = this.getAttribute('max');
        if (maxDate) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setMaxDate).call(this, maxDate);
        }
    }
    setMinDate(minDate) {
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setMinDate).call(this, minDate);
    }
    setMaxDate(maxDate) {
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setMaxDate).call(this, maxDate);
    }
    inputChar(char, pos) {
        if (pos == 4 || pos == 7) {
            char = '/';
        }
        if (pos > 9 || pos < 0) {
            return;
        }
        __classPrivateFieldGet(this, _JBDateInputWebComponent_inputRegex, "f").lastIndex = 0;
        const newValueArr = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_inputValue_get).split('');
        if (__classPrivateFieldGet(this, _JBDateInputWebComponent_usePersianDigits, "f")) {
            char = enToFaDigits(char);
        }
        newValueArr[pos] = char;
        const newValue = newValueArr.join('');
        //due ro performance issue i remove validation check on evry char input
        // const isValid = this.#inputRegex.test(newValue);
        // if (isValid) {
        __classPrivateFieldSet(this, _JBDateInputWebComponent_instances, newValue, "a", _JBDateInputWebComponent_inputValue_set);
        //}
    }
    isValidChar(char) {
        //allow 0-9 ۰-۹ and / char only
        return /[\u06F0-\u06F90-9/]/g.test(char);
    }
    standardString(dateString) {
        //TODO: convert en to persian or persian to en base on user config
        const sNumString = faToEnDigits(dateString);
        //convert dsd137/06/31rer to 1373/06/31
        const sString = sNumString.replace(/[^\u06F0-\u06F90-9/]/g, '');
        return sString;
    }
    onInputBeforeInput(e) {
        //TODO: handel range selection
        const inputSelecteionStart = e.target.selectionStart;
        const baseCarretPos = inputSelecteionStart;
        const inputedString = e.data;
        if (inputedString) {
            //insert mode
            //check if we are in placeholder mode we update or input text to standard mode
            if (this.placeholder && __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_inputValue_get) === "") {
                __classPrivateFieldSet(this, _JBDateInputWebComponent_instances, emptyInputValueString, "a", _JBDateInputWebComponent_inputValue_set);
            }
            // make string something like 1373/06/31 from dsd۱۳۷۳/06/31rer
            const standardString = this.standardString(inputedString);
            standardString.split('').forEach((inputedChar, i) => {
                let carretPos = baseCarretPos + i;
                if (!this.isValidChar(inputedChar)) {
                    e.preventDefault();
                    return;
                }
                if (carretPos == 4 || carretPos == 7) {
                    // in / pos
                    if (inputedChar == '/') {
                        e.target.setSelectionRange(carretPos + 1, carretPos + 1);
                    }
                    //push carrot if it behind / char
                    carretPos++;
                }
                // we want user typed char ignored in some scenario
                let isIgnoreChar = false;
                if (inputedChar == '/') {
                    return;
                }
                const typedNumber = parseInt(inputedChar);
                if (carretPos == 5 && typedNumber > 1) {
                    this.inputChar("0", carretPos);
                    carretPos++;
                }
                const monthRes = handleMonthBeforeInput.call(this, typedNumber, carretPos);
                carretPos = monthRes.carretPos;
                const dayRes = handleDayBeforeInput.call(this, typedNumber, carretPos);
                carretPos = dayRes.carretPos;
                isIgnoreChar = isIgnoreChar || dayRes.isIgnoreChar || monthRes.isIgnoreChar;
                if (!isIgnoreChar) {
                    this.inputChar(inputedChar, carretPos);
                    e.target.setSelectionRange(carretPos + 1, carretPos + 1);
                }
            });
            e.preventDefault();
        }
        if (e.inputType == 'deleteContentBackward' || e.inputType == 'deleteContentForward' || e.inputType == 'delete' || e.inputType == 'deleteByCut' || e.inputType == 'deleteByDrag') {
            //delete mode
            const inputSelectionEnd = e.target.selectionEnd;
            let d = 0;
            if (e.inputType == 'deleteContentBackward') {
                //backspace delete
                d = -1;
            }
            for (let i = inputSelecteionStart; i <= inputSelectionEnd; i++) {
                this.inputChar(' ', i + d);
            }
            this.elements.input.setSelectionRange(inputSelecteionStart + d, inputSelecteionStart + d);
            //show placeholder if input were empty
            if (this.placeholder && __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_inputValue_get) == emptyInputValueString) {
                __classPrivateFieldSet(this, _JBDateInputWebComponent_instances, "", "a", _JBDateInputWebComponent_inputValue_set);
            }
            e.preventDefault();
        }
    }
    onInputKeyPress(e) {
        const eventInitDic = {
            bubbles: e.bubbles,
            cancelable: e.cancelable,
            composed: e.composed,
            key: e.key,
            code: e.code,
            location: e.location,
            repeat: e.repeat,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey,
            altKey: e.altKey,
            metaKey: e.metaKey,
            detail: e.detail,
            isComposing: e.isComposing,
            keyCode: e.keyCode,
            charCode: e.charCode,
            which: e.which,
        };
        const keyPressEvent = new KeyboardEvent('keypress', eventInitDic);
        this.dispatchEvent(keyPressEvent);
    }
    onInputKeyup(e) {
        //update value if it is valid
        const validationResult = this.triggerInputValidation(false);
        if (validationResult.isAllValid) {
            this.updateValueObjFromInput(__classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get));
        }
        this.callOnInputKeyup(e);
    }
    callOnInputKeyup(e) {
        const keyUpInitObj = {
            key: e.key,
            keyCode: e.keyCode,
            code: e.code,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey,
            altKey: e.altKey,
            charCode: e.charCode,
            which: e.which,
        };
        const event = new KeyboardEvent('keyup', keyUpInitObj);
        this.dispatchEvent(event);
    }
    onInputKeydown(e) {
        const target = e.target;
        if (e.keyCode == 38 || e.keyCode == 40) {
            //up and down button
            const carretPos = target.selectionStart;
            if (carretPos < 5) {
                e.keyCode == 38 ? this.addYear(1) : this.addYear(-1);
                target.setSelectionRange(0, 4);
            }
            if (carretPos > 4 && carretPos < 8) {
                e.keyCode == 38 ? this.addMonth(1) : this.addMonth(-1);
                target.setSelectionRange(5, 7);
            }
            if (carretPos > 7) {
                e.keyCode == 38 ? this.addDay(1) : this.addDay(-1);
                target.setSelectionRange(8, 10);
            }
            e.preventDefault();
        }
    }
    addYear(interval) {
        const currentYear = this.yearValue ? this.yearValue : __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").yearOnEmptyBaseOnValueType;
        const currentMonth = this.monthValue || 1;
        const currentDay = this.dayValue || 1;
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromNumbers).call(this, currentYear + interval, currentMonth, currentDay);
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    addMonth(interval) {
        const currentYear = this.yearValue ? this.yearValue : __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").yearOnEmptyBaseOnValueType;
        const currentMonth = this.monthValue || 1;
        const currentDay = this.dayValue || 1;
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromNumbers).call(this, currentYear, currentMonth + interval, currentDay);
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    addDay(interval) {
        const currentYear = this.yearValue ? this.yearValue : __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").yearOnEmptyBaseOnValueType;
        const currentMonth = this.monthValue || 1;
        const currentDay = this.dayValue || 1;
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromNumbers).call(this, currentYear, currentMonth, currentDay + interval);
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    /**
     * will convert current valueObject to expected value string
     * @param {ValueTypes} type
     * @return {String} value base on format and date type
     */
    getDateValue(type = this.valueType) {
        return __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueStringFromValueObject(__classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f"), type);
    }
    setValueObjNull() {
        // mean we reset calendar value and set it to null
        __classPrivateFieldSet(this, _JBDateInputWebComponent_valueObject, getEmptyValueObject(), "f");
    }
    updateCalendarView() {
        //update jb-calendr view base on current data
        const value = {
            year: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getCalendarYear(__classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f")),
            month: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getCalendarMonth(__classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f")),
            day: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getCalendarDay(__classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f"))
        };
        if (value.year && value.month && value.day) {
            //if we have all data we update calendar value
            this.elements.calendar.value = value;
        }
        else if (value.year && value.month) {
            //if we dont have all data we just set view year and month
            this.elements.calendar.data.selectedYear = value.year;
            this.elements.calendar.data.selectedMonth = value.month;
        }
    }
    getValueObjectFromInputText(inputText) {
        __classPrivateFieldGet(this, _JBDateInputWebComponent_inputRegex, "f").lastIndex = 0;
        const res = __classPrivateFieldGet(this, _JBDateInputWebComponent_inputRegex, "f").exec(inputText);
        if (res && res.groups) {
            return __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueObjectBaseOnInputType(parseInt(res.groups.year), parseInt(res.groups.month), parseInt(res.groups.day), __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.year, __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali.month);
        }
        const emptyValue = getEmptyValueObject();
        return emptyValue;
    }
    /**
     * called when input text change and we want to update value object base on input text
     * @param {string}inputString
     */
    updateValueObjFromInput(inputString) {
        const res = __classPrivateFieldGet(this, _JBDateInputWebComponent_inputRegex, "f").exec(inputString);
        if (res && res.groups) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromNumberBaseOnInputType).call(this, parseInt(res.groups.year), parseInt(res.groups.month), parseInt(res.groups.day));
        }
    }
    focus() {
        //public
        this.elements.input.focus();
        this.showCalendar = true;
    }
    handleCarretPosOnInputFocus() {
        const carretPos = this.elements.input.selectionStart;
        if (carretPos) {
            if (this.typedYear == "    " && carretPos <= 4) {
                //if year was null we move cursor to first char of year
                this.elements.input.setSelectionRange(0, 0);
                return;
            }
            if (this.typedMonth == "  " && carretPos > 4 && carretPos <= 7) {
                //if month was null we move cursor to first char of month
                this.elements.input.setSelectionRange(5, 5);
                return;
            }
            if (this.typedDay == "  " && carretPos > 7 && carretPos <= 10) {
                //if day was null we move cursor to first char of day
                this.elements.input.setSelectionRange(8, 8);
                return;
            }
        }
    }
    /**
     * check if there is no update from last time then if change we update
     * @param { string }newString newly typed String
     * @return { boolean }
     * @private
     */
    checkIfInputTextIsChangedFromLastTime(newString) {
        if (__classPrivateFieldGet(this, _JBDateInputWebComponent_lastInputStringValue, "f") != newString) {
            __classPrivateFieldSet(this, _JBDateInputWebComponent_lastInputStringValue, newString, "f");
            return true;
        }
        return false;
    }
    onInputFocus(e) {
        __classPrivateFieldSet(this, _JBDateInputWebComponent_lastInputStringValue, __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get), "f");
        this.focus();
        document.addEventListener('selectionchange', this.handleCarretPosOnInputFocus.bind(this));
    }
    onInputBlur(e) {
        document.removeEventListener('selectionchange', this.handleCarretPosOnInputFocus.bind(this));
        const focusedElement = e.relatedTarget;
        if (focusedElement !== this.elements.calendar && focusedElement !== this.elements.calendarTriggerButton) {
            this.showCalendar = false;
        }
        const inputText = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get);
        //check if there is no update from last time then if change we update
        if (this.checkIfInputTextIsChangedFromLastTime(inputText)) {
            this.updateValueObjFromInput(inputText);
            this.callOnChange();
        }
    }
    onCalendarBlur(e) {
        const focusedElement = e.relatedTarget;
        if (focusedElement !== this.elements.input && focusedElement !== this.elements.calendarTriggerButton) {
            this.showCalendar = false;
        }
    }
    onCalendarContainerClicked(e) {
        const isCalendarWrapperClicked = e.composedPath().findIndex(x => x == this.elements.calendarWrapper);
        if (isCalendarWrapperClicked == -1) {
            this.showCalendar = false;
            this.elements.input.blur();
        }
    }
    callOnChange() {
        //TODO: compare value with last time value and call onChange only if value changed
        const validationResult = this.triggerInputValidation(true);
        const event = new CustomEvent('change', {
            detail: {
                isValid: validationResult.isAllValid,
                validationObject: validationResult,
                valueObject: Object.assign({}, __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f"))
            },
        });
        this.dispatchEvent(event);
    }
    triggerInputValidation(showError = true) {
        // this method is for use out of component  for example if user click on submit button and developer want to check if all fields are valid
        //takeAction determine if we want to show user error in web component difualtManner or developer will handle it by himself
        const inputText = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_sInputValue_get);
        const validationResult = this.checkInputValidation(inputText);
        const firstFault = validationResult.validationList.find(x => !x.isValid);
        if (showError == true && !validationResult.isAllValid && firstFault) {
            this.showValidationError(firstFault.message ? firstFault.message : this.DefaultValidationErrorMessage);
        }
        else if (validationResult.isAllValid) {
            this.clearValidationError();
        }
        this.validation = {
            isValid: validationResult.isAllValid,
            message: firstFault ? firstFault.message : null,
            detail: validationResult
        };
        return validationResult;
    }
    /**
     * check if date is in min and max and other user specified valid date range.
     * @param  {Number} year year of date.
     * @param  {Number} month month of date.
     * @param  {Number} day day of date.
     * @param  {String} dateInputType what is the date type of this number jalali or gregorian
     * @return {Object}
     */
    checkDateRestrictions(year, month, day, dateInputType) {
        return DateFactory.checkDateRestrictions(year, month, day, dateInputType, this.dateRestrictions);
    }
    checkInputValidation(value) {
        //check validation in date has 3 step: 1-check required 2- check restrictions like min and max 3- check user manual validation list(regex or function)
        const dateObjValue = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateObjectValueBaseOnFormat(value, this.inputFormat);
        const validationResult = {
            validationList: [],
            isAllValid: true,
        };
        //check Min and max DateValidation
        if ((dateObjValue.year == null || dateObjValue.month == null || dateObjValue.day == null) && this.required) {
            validationResult.isAllValid = false;
            validationResult.validationList.push({
                isValid: false,
                message: 'لطفا مقدار تاریخ را کامل وارد کنید',
                validation: "REQUIRED"
            });
        }
        if (dateObjValue.year !== null && dateObjValue.month !== null && dateObjValue.day !== null) {
            const restrictionResult = this.checkDateRestrictions(dateObjValue.year, dateObjValue.month, dateObjValue.day, this.inputType);
            validationResult.isAllValid = validationResult.isAllValid && restrictionResult.isAllValid;
            if (!restrictionResult.isAllValid) {
                if (!restrictionResult.min.isValid) {
                    validationResult.validationList.push({
                        isValid: false,
                        message: restrictionResult.min.message,
                        validation: "MIN"
                    });
                }
                if (!restrictionResult.max.isValid) {
                    validationResult.validationList.push({
                        isValid: false,
                        message: restrictionResult.max.message,
                        validation: "MAX"
                    });
                }
            }
        }
        // check custom validation feeded by developer user
        this.validationList.forEach((validation) => {
            const res = this.checkValidation(value, validation);
            validationResult.validationList.push(res);
            if (!res.isValid) {
                validationResult.isAllValid = false;
            }
        });
        return validationResult;
    }
    checkValidation(text, validation) {
        //if user validator is anything other that regex or function we will return false
        let testRes = false;
        if (validation.validator instanceof RegExp) {
            testRes = validation.validator.test(text);
            validation.validator.lastIndex = 0;
        }
        if (typeof validation.validator == "function") {
            const valueObject = this.getValueObjectFromInputText(text);
            const valueText = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueStringFromValueObject(valueObject);
            // we cant use this.#valueObj becuase in some scenario its not updated
            testRes = validation.validator(text, valueObject, valueText);
        }
        if (!testRes) {
            return {
                isValid: false,
                message: validation.message,
                validation: validation
            };
        }
        return {
            isValid: true,
            message: '',
            validation: validation
        };
    }
    showValidationError(error) {
        this.elements.messageBox.innerHTML = error;
        this.elements.messageBox.classList.add('error');
    }
    clearValidationError() {
        this.validation = {
            isValid: true,
            message: null,
            detail: null
        };
        const text = this.getAttribute('message') || '';
        this.elements.messageBox.innerHTML = text;
        this.elements.messageBox.classList.remove('error');
    }
    onCalendarElementinitiated() {
        this.elements.calendar.dateRestrictions.min = this.dateRestrictions.min;
        this.elements.calendar.dateRestrictions.max = this.dateRestrictions.max;
        this.elements.calendar.defaultCalendarData = {
            gregorian: {
                year: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").nicheNumbers.calendarYearOnEmpty.gregorian,
                month: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").nicheNumbers.calendarMonthOnEmpty.gregorian,
            },
            jalali: {
                year: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").nicheNumbers.calendarYearOnEmpty.jalali,
                month: __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").nicheNumbers.calendarMonthOnEmpty.jalali,
            }
        };
        this.updateCalendarView();
    }
    onCalendarButtonFocused(e) {
        const prevFocused = e.relatedTarget;
        if (this.showCalendar && prevFocused && [this.elements.calendar, this.elements.input].includes(prevFocused)) {
            //if calendar was displayed but user click on icon we hide it here
            prevFocused.focus();
            this.showCalendar = false;
        }
        else {
            // if user focus on calendar button from outside of calendar area we show calendar
            __classPrivateFieldSet(this, _JBDateInputWebComponent_isCalendarButtonClickEventIsAfterFocusEvent, true, "f");
            this.showCalendar = true;
        }
    }
    onCalendarButtonBlur(e) {
        if (![this.elements.calendar, this.elements.input].includes(e.relatedTarget)) {
            this.showCalendar = false;
        }
    }
    onCalendarButtonClick() {
        var _a;
        const focusedElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement;
        if (focusedElement && !__classPrivateFieldGet(this, _JBDateInputWebComponent_isCalendarButtonClickEventIsAfterFocusEvent, "f") && focusedElement == this.elements.calendarTriggerButton) {
            //check if this click is event exactly after focus or not if its after focus we just pass but if its not and its a second click we close menu or reopen menu if closed before
            this.showCalendar = !this.showCalendar;
        }
        __classPrivateFieldSet(this, _JBDateInputWebComponent_isCalendarButtonClickEventIsAfterFocusEvent, false, "f");
    }
    onCalendarSelect(e) {
        const target = e.target;
        const { year, month, day } = target.value;
        if (year && month && day) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromNumberBaseOnInputType).call(this, year, month, day);
            __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
            this.showCalendar = false;
            this.callOnDateSelect();
            this.callOnChange();
        }
    }
    callOnDateSelect() {
        //when user pick a day in calendar modal
        const event = new CustomEvent('select');
        this.dispatchEvent(event);
    }
    onInputTypeChange() {
        this.elements.calendar.inputType = this.inputType;
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateinputTextFromValue).call(this);
    }
    /**
     * set opend calendar date when date input value is empty
     * @public
     * @param {number} year which year you want to show in empty state in calendar.
     * @param {number} month which month you want to show in empty state in calendar.
     * @param {InputTypes} dateType default is your configured input-type  but you can set it otherwise if you want to change other type of calendar in case of change in input-type.
     */
    setCalendarDefaultDateView(year, month, dateType) {
        if (year && month) {
            __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").setCalendarDefaultDateView(year, month, dateType);
            this.updateCalendarView();
        }
    }
}
_JBDateInputWebComponent_dateFactory = new WeakMap(), _JBDateInputWebComponent_showCalendar = new WeakMap(), _JBDateInputWebComponent_inputRegex = new WeakMap(), _JBDateInputWebComponent_valueObject = new WeakMap(), _JBDateInputWebComponent_placeholder = new WeakMap(), _JBDateInputWebComponent_validationList = new WeakMap(), _JBDateInputWebComponent_usePersianDigits = new WeakMap(), _JBDateInputWebComponent_lastInputStringValue = new WeakMap(), _JBDateInputWebComponent_isCalendarButtonClickEventIsAfterFocusEvent = new WeakMap(), _JBDateInputWebComponent_fixCalendarContainerPos = new WeakMap(), _JBDateInputWebComponent_resetCalendarContainerPos = new WeakMap(), _JBDateInputWebComponent_instances = new WeakSet(), _JBDateInputWebComponent_updateFormAssossicatedValue = function _JBDateInputWebComponent_updateFormAssossicatedValue() {
    //in html form we need to get date input value in native way this function update and set value of the input so form can get it when needed
    if (this.internals_ && typeof this.internals_.setFormValue == "function") {
        this.internals_.setFormValue(this.value);
    }
}, _JBDateInputWebComponent_sInputValue_get = function _JBDateInputWebComponent_sInputValue_get() {
    let value = __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "a", _JBDateInputWebComponent_inputValue_get);
    if (__classPrivateFieldGet(this, _JBDateInputWebComponent_usePersianDigits, "f")) {
        value = faToEnDigits(value);
    }
    return value;
}, _JBDateInputWebComponent_inputValue_get = function _JBDateInputWebComponent_inputValue_get() {
    return this.elements.input.value;
}, _JBDateInputWebComponent_inputValue_set = function _JBDateInputWebComponent_inputValue_set(value) {
    this.elements.input.value = value;
}, _JBDateInputWebComponent_setMinDate = function _JBDateInputWebComponent_setMinDate(dateInput) {
    let minDate = null;
    //create min date base on input value type
    if (typeof dateInput == "string") {
        minDate = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateFromValueDateString(dateInput);
    }
    else {
        minDate = dateInput;
    }
    if (minDate) {
        this.dateRestrictions.min = minDate;
        if (this.elements.calendar.dateRestrictions) {
            this.elements.calendar.dateRestrictions.min = minDate;
        }
    }
    else {
        console.error(`min date ${dateInput} is not valid and it will be ignored`, '\n', 'please provide min date in format : ' + __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").valueFormat);
    }
}, _JBDateInputWebComponent_setMaxDate = function _JBDateInputWebComponent_setMaxDate(dateInput) {
    let maxDate = null;
    //create max date base on input value type
    if (typeof dateInput == "string") {
        maxDate = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateFromValueDateString(dateInput);
    }
    else {
        maxDate = dateInput;
    }
    if (maxDate) {
        this.dateRestrictions.max = maxDate;
        if (this.elements.calendar.dateRestrictions) {
            this.elements.calendar.dateRestrictions.max = maxDate;
        }
    }
    else {
        console.error(`max date ${dateInput} is not valid and it will be ignored`, '\n', 'please provide max date in format : ' + __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").valueFormat);
    }
}, _JBDateInputWebComponent_setDateValue = function _JBDateInputWebComponent_setDateValue(value) {
    if (typeof value == "string") {
        switch (__classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").valueType) {
            case ValueTypes.gregorian:
            case ValueTypes.jalali:
                __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromString).call(this, value);
                break;
            case ValueTypes.timestamp:
                __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromTimeStamp).call(this, value);
                break;
        }
    }
    else if (value instanceof Date) {
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromDate).call(this, value);
    }
    __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateFormAssossicatedValue).call(this);
}, _JBDateInputWebComponent_setDateValueFromDate = function _JBDateInputWebComponent_setDateValueFromDate(value) {
    const valueObject = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateObjectValueFromDateValue(value);
    __classPrivateFieldSet(this, _JBDateInputWebComponent_valueObject, valueObject, "f");
    this.updateCalendarView();
}, _JBDateInputWebComponent_setDateValueFromTimeStamp = function _JBDateInputWebComponent_setDateValueFromTimeStamp(value) {
    const timeStamp = parseInt(value);
    __classPrivateFieldSet(this, _JBDateInputWebComponent_valueObject, __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueObjectFromTimeStamp(timeStamp), "f");
    this.updateCalendarView();
}, _JBDateInputWebComponent_setDateValueFromString = function _JBDateInputWebComponent_setDateValueFromString(value) {
    const dateInObject = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateObjectValueBaseOnFormat(value);
    if (dateInObject.year && dateInObject.month && dateInObject.day) {
        __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_setDateValueFromNumbers).call(this, dateInObject.year, dateInObject.month, dateInObject.day);
    }
    else {
        if (value !== null && value !== undefined && value !== '') {
            console.error('your inputed Date doest match defualt or your specified Format');
        }
        else {
            this.setValueObjNull();
        }
    }
}, _JBDateInputWebComponent_setDateValueFromNumbers = function _JBDateInputWebComponent_setDateValueFromNumbers(year, month, day) {
    const prevYear = this.yearValue;
    const prevMonth = this.monthValue;
    const result = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueObjectBaseOnValueType(year, month, day, prevYear, prevMonth);
    __classPrivateFieldSet(this, _JBDateInputWebComponent_valueObject, result, "f");
    this.updateCalendarView();
}, _JBDateInputWebComponent_setDateValueFromNumberBaseOnInputType = function _JBDateInputWebComponent_setDateValueFromNumberBaseOnInputType(year, month, day) {
    const prevYear = this.yearBaseOnInputType;
    const prevMonth = this.monthBaseOnInputType;
    const result = __classPrivateFieldGet(this, _JBDateInputWebComponent_dateFactory, "f").getDateValueObjectBaseOnInputType(year, month, day, prevYear, prevMonth);
    __classPrivateFieldSet(this, _JBDateInputWebComponent_valueObject, result, "f");
    this.updateCalendarView();
    __classPrivateFieldGet(this, _JBDateInputWebComponent_instances, "m", _JBDateInputWebComponent_updateFormAssossicatedValue).call(this);
}, _JBDateInputWebComponent_updateinputTextFromValue = function _JBDateInputWebComponent_updateinputTextFromValue() {
    const { year, month, day } = this.inputType == InputTypes.jalali ? __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").jalali : __classPrivateFieldGet(this, _JBDateInputWebComponent_valueObject, "f").gregorian;
    if (this.placeholder && !(year && month && day)) {
        //if we have placeholder and inputed value were all null we show placeholder until user input some value
        __classPrivateFieldSet(this, _JBDateInputWebComponent_instances, "", "a", _JBDateInputWebComponent_inputValue_set);
        return;
    }
    //
    let str = this.inputFormat;
    let yearString = '    ', monthString = '  ', dayString = '  ';
    if (year != null && !isNaN(year)) {
        if (year < 10) {
            yearString = '000' + year;
        }
        else if (year < 100) {
            yearString = '00' + year;
        }
        else if (year < 1000) {
            yearString = '0' + year;
        }
        else {
            yearString = year.toString();
        }
    }
    if (month != null && !isNaN(month)) {
        if (month < 10) {
            monthString = '0' + month;
        }
        else {
            monthString = month.toString();
        }
    }
    if (day != null && !isNaN(day)) {
        if (day < 10) {
            dayString = '0' + day;
        }
        else {
            dayString = day.toString();
        }
    }
    //convert to fa char if needed
    if (__classPrivateFieldGet(this, _JBDateInputWebComponent_usePersianDigits, "f")) {
        yearString = enToFaDigits(yearString);
        monthString = enToFaDigits(monthString);
        dayString = enToFaDigits(dayString);
    }
    str = str.replace('YYYY', yearString).replace('MM', monthString).replace('DD', dayString);
    __classPrivateFieldSet(this, _JBDateInputWebComponent_instances, str, "a", _JBDateInputWebComponent_inputValue_set);
};
JBDateInputWebComponent.formAssociated = true;
const myElementNotExists = !customElements.get('jb-date-input');
if (myElementNotExists) {
    window.customElements.define('jb-date-input', JBDateInputWebComponent);
}

export { JBDDateInputInboxElementWebComponent, InputTypes as JBDateInputInputTypes, JBDateInputWebComponent, ValueTypes };
//# sourceMappingURL=JBDateInput.js.map
